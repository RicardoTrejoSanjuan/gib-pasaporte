pipeline {
      agent any

      parameters {
           string(name: 'openshift', defaultValue: 'https://console.dev.openshift.multivaloresgf.local:8443', description: '')
           string(name: 'openshiftProject', defaultValue: 'codi-qa', description: 'Proyecto de Openshift')
           string(name: 'imageName', defaultValue: 'codi-08-consultamensajescobrocomprador', description: '')
           string(name: 'nexus', defaultValue: 'nexus-0.dev.openshift.multivaloresgf.local:18444', description: '')
           string(name: 'imageProject', defaultValue: 'codi', description: 'Proyecto para generar el tag y subir a nexus la imagen')
           string(name: 'timezone', defaultValue:'America/Mexico_City', description: 'Zona horaria (logs)')
           string(name: 'languaje', defaultValue:'es', description: 'lenguaje (logs)')
           string(name: 'tagSource', defaultValue: 'dev', description: 'Imagen fuente')
           string(name: 'tagDest', defaultValue: 'qa', description: 'Imagen destino')
      }

  stages{
        stage('Update Docker Image to Nexus') {
          steps {
                sh "docker pull ${params.nexus}/${params.imageProject}/${params.imageName}:${params.tagSource}"
                sh "docker tag ${params.nexus}/${params.imageProject}/${params.imageName}:${params.tagSource} ${params.nexus}/${params.imageProject}/${params.imageName}:${params.tagDest}"
                sh "docker push ${params.nexus}/${params.imageProject}/${params.imageName}:${params.tagDest}"
                sh "docker container rm \$(docker container ls -q -f 'status=exited' -f 'exited=0' -f 'exited=1') || true"
                sh "docker images -a | grep '^<none>' | awk '{print \$3}' | xargs docker rmi -f || true"
                sh "docker images -a | grep '${params.imageName}' | awk '{print \$3}' | xargs docker rmi -f || true"
          }
        }

        stage('Deploy OpenShift') {
          steps {
              withCredentials([usernamePassword(credentialsId: 'openshift-teca-multiva-credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                sh "oc login -u ${USERNAME} -p ${PASSWORD} ${params.openshift}"
                sh "oc project ${params.openshiftProject}"

                sh """
                if (( \$(oc get dc|grep ${params.imageName}|wc -l) )) ; then
                    # Actualizar imagen
                    echo Actualizando imagen del servicio
                    oc import-image ${params.nexus}/${params.imageProject}/${params.imageName}:${params.tagDest} --confirm
                else
                    # Crear aplicaci√≥n
                    echo Creando servicio desde imagen
                    oc delete imagestream ${params.imageName} --ignore-not-found=true
                    oc apply -f deploy/dc.qa.yaml
                    oc expose dc/${params.imageName}
                fi
                """
            }
          }
        }
      }
  }
